---
- name: Install | CentOS and related families
  when: >
    ansible_distribution in tailscale_centos_family_distros
  ansible.builtin.include_tasks: centos/install.yml

- name: Install | Amazon Linux 2
  when:
    - ansible_distribution == 'Amazon'
    - ansible_distribution_major_version | int < 2023
  ansible.builtin.include_tasks: centos/install-legacy.yml

- name: Install | Debian and related families
  when: ansible_distribution in tailscale_debian_family_distros
  ansible.builtin.include_tasks: debian/install.yml

- name: Install | Fedora and related families
  when: >
    ansible_distribution == 'Fedora'
    or (ansible_distribution == 'Amazon' and ansible_distribution_major_version | int >= 2023)
  ansible.builtin.include_tasks: fedora/install.yml

- name: Install | Arch
  when: ansible_distribution == 'Archlinux'
  ansible.builtin.include_tasks: arch/install.yml

- name: Install | OpenSUSE
  when: ansible_distribution in tailscale_opensuse_family_distros
  ansible.builtin.include_tasks: opensuse/install.yml

- name: Install | Remove legacy state folder
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.artis3n-tailscale"
    state: absent

- name: Install | Set state idempotency folder
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: '0700'
  loop:
    - "{{ tailscale_state_folder }}"
    - "{{ tailscale_state_folder }}/artis3n-tailscale"

- name: Install | Store state idempotency README
  ansible.builtin.copy:
    src: files/state_readme.md
    dest: "{{ tailscale_state_folder }}/artis3n-tailscale/README.md"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'

- name: Install | Enable Service
  become: true
  ansible.builtin.service:
    name: "{{ tailscale_service }}"
    state: started
    enabled: true

- name: Install | Fetch Tailscale status
  ansible.builtin.command: tailscale status --json
  changed_when: false
  register: tailscale_status

- name: Install | Parse status JSON
  vars:
    tailscale_status_parsed: "{{ tailscale_status.stdout | from_json }}"
  ansible.builtin.set_fact:
    tailscale_is_online: "{{ tailscale_status_parsed.Self.Online }}"
    tailscale_version: "{{ tailscale_status_parsed.Version }}"

- name: Install | Tailscale version and online status
  ansible.builtin.debug:
    msg: "Ver: {{ tailscale_version }} Online: {{ tailscale_is_online }}"
  when: verbose

