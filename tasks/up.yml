---
- name: Up | Prepend 'tag:' to each item in the list
  ansible.builtin.set_fact:
    tailscale_prepared_tags: "{{ tailscale_tags | map('regex_replace', '^', 'tag:') | list }}"

# OAuth key starts with 'tskey-client-', auth key starts with 'tskey-auth-', with headscale it can be 'unused'
- name: Up | Build `tailscale up` arguments strings
  ansible.builtin.set_fact:
    tailscale_authkey_type: >-
      {# Check if the key is an OAuth key #}
      {% if tailscale_authkey.startswith('tskey-client-') %}
      OAuth Client Secret
      {% elif tailscale_authkey.startswith('tskey-auth-') %}
      API Token
      {% else %}
      Unknown token format
      {% endif %}
    tailscale_authkey_string: >-
      {# Check if the key is an OAuth key #}
      {% if tailscale_authkey.startswith('tskey-client-') %}
      {{ tailscale_authkey }}?ephemeral={{ tailscale_oauth_ephemeral | bool }}&preauthorized={{ tailscale_oauth_preauthorized | bool }}
      {# Check if the key is not OAuth (regular authkey or unused) #}
      {% else %}
      {{ tailscale_authkey }}
      {% endif %}
    tailscale_tags_string: >-
      {% if tailscale_tags | length > 0 %}
      --advertise-tags={{ tailscale_prepared_tags | join(',') }}
      {% endif %}
  no_log: "{{ not (insecurely_log_authkey | bool) }}"

- name: Up | Authkey Type
  ansible.builtin.debug:
    msg: "{{ tailscale_authkey_type | trim }}"
  when: verbose

- name: Up | Build the final tailscale_args
  ansible.builtin.set_fact:
    tailscale_args_string: >
      {{ tailscale_args }}
      {{ tailscale_tags_string | trim if tailscale_tags_string is not none else '' }}
      --timeout={{ tailscale_up_timeout | trim }}s

- name: Up | Final `tailscale up` arguments string
  ansible.builtin.debug:
    msg: "{{ tailscale_args_string | trim }}"
  when: verbose

- name: Up | Save State
  ansible.builtin.template:
    src: state.j2
    dest: "{{ tailscale_state_folder }}/artis3n-tailscale/state"
    owner: "{{ ansible_user_uid }}"
    group: "{{ ansible_user_gid }}"
    mode: '0644'
  register: state_file

- name: Up | Bring Tailscale Up
  become: true
  ansible.builtin.command: "tailscale up {{ tailscale_args_string | trim }} --authkey={{ tailscale_authkey_string | trim }}"
  # Since the auth key is included in this task's output, we do not want to log output
  no_log: "{{ not (insecurely_log_authkey | bool) }}"
  changed_when: true
  register: tailscale_start
  # If a failure occurred due to state changes, we still want to log a redacted version of the error if "no_log" is true
  ignore_errors: true
  when:
    - not tailscale_up_skip
    - state_file is changed or not tailscale_is_online
  notify: Confirm Tailscale is Connected
  async: "{{ (tailscale_up_timeout | trim | int) + 10 }}"
  poll: 5

- name: Up | Report non-sensitive stdout from "tailscale up"  # noqa: no-handler
  ansible.builtin.debug:
    msg: "{{ tailscale_start.stdout | replace(tailscale_authkey, 'REDACTED') | regex_replace('\\t', '') | split('\n') }}"
  when:
    - tailscale_start is failed
    - tailscale_start.stdout | length > 0
  register: nonsensitive_stdout

- name: Up | Pausing to highlight stdout message above
  ansible.builtin.wait_for:
    timeout: 5
  when: nonsensitive_stdout is not skipped

- name: Up | Clear State Upon Error
  ansible.builtin.file:
    path: "{{ tailscale_state_folder }}/artis3n-tailscale/state"
    state: absent
  when:
    - tailscale_start is failed

- name: Up | Report redacted failure from "tailscale up"  # noqa: no-handler
  ansible.builtin.fail:
    msg: "{{ tailscale_start.stderr | default () | regex_replace(tailscale_authkey, 'REDACTED') | regex_replace('\\t', '') | split('\n') }}"
  when:
    - tailscale_start is failed

- name: Up | Register role facts
  ansible.builtin.include_tasks: facts.yml
  when:
    - not tailscale_up_skip
